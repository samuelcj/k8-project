SUMMARY OF THE KUBERNETES PROJECT
Kubernetes is an open source container orchestration and management technology and platform.
This gives applicatin high availiability, scalability and proper disaster recovery.

## MAIN KUBERNETES COMPONENTS
1. Node: This refers to a simple server or virtual machine. where the kubernetes runs.
2. Pod: This is the smallest unit of a kubernetes. It is just basically an abstraction of a container.
- So the pod creates the runing environment for the app or it is just a layer on the container.
- It is usually one container per pod.
- Each pod gets it's own private IP address, with which thwy use to interact with each other. A new IP is reassigned anytime thr pod is recreated.
3. Service: This helps solve the changing IP issue of pods. It gives a permanent IP address and transcends the lifecycle of the pod.
-The service can also act as a load balancer, in a case of cluster replication, and multiple pods. 
4. External Service: These are services that opens communication from the public to your pods. eg: http://<node ip>:<service port>
5. Internal Service: These are service used but dont grant public access.
6. Ingress: This is a component used to map or forward public traffic to services in a secured pattern eg: https://my-app.com
7. ConfigMap: This is the external configuration to my application eg DB URL. And it is usually conected to the pod, so the pod gets the data from configmap even when there are changes.
8. Secret: This is just like the config map, but contains informations that shouldnt be exposed (internal) eg: DB Password, credentials, etc.
9. Volumes: This is the data storage utilityy to enable data persistency irrespective of the pod/cluster lifecycle.
10: Deployment: This is the blueprint of your cluster. It is where you define the amount and nature of your cluster. (for Stateless applications)
- So we dont have to be creating pods, we just create Deployments and specify how many pods we need. It is an abstraction of pods.  
11. StatefulSet: This helps stateful applications like Databases to keep their data consistency, especially during replication or multiple deployments.
- Using StatefulSets for DB is very tedious. This is why DBs are usually created outside the k8 cluster.

## KUBERNETES BASIC ARCHITECTURE
1. Node Processes: Thiese processes runs on the Worker Node. The node is what houses the pods and 3 Processes must be installed:
i. Container runtime (eg: containerd, docker, cri-o, etc)
ii. kubelet: more like the k8 runtime. It enables interaction between the container and the node.
iii. Kube Proxy: This is responsible for the communication inside the node. eg: enable services to properly forward traffic.

2. Master Processes: These processes runs on the Master Nodes. They control the cluster state and the worker nodes. 4 processes must be available:
i. API Server: This is how we interact to use K8. It could be a UI, CLI, IDE, SDK, etc. API Server is like the cluster gateway and source of authentication.
ii. Scheduler: After API server validates our request and action, it hands it over to the scheduler to fulfil the required action n an intelligent manner.
- Note: After the scheduler decides which worker node to fulfil the SPI request, kubelet picks it up in the node and executes it.
iii. Controller Manager: Helps to detect state changes of the nodes and takes action by sending them to the scheduler. eg recreate dead pods.
iv: etcd: This is the key-value store of a cluster state. More like the cluster brain, where all changes, configuration and mechanis, is saved.
- This helps the master processes and worker processes to communicate for froper state management.

NB: Node processes (worker nodes) require more CPU, Memory and Storage as they do more work or task than the Master processes/nodes

MINIKUBE: This is a one node cluster where the master and worker processes run. It makes practice deployment of kubernetes on locals easy. This node comes with docker runtime pre installed, so we can use our containers in it. 
NB: Minikube runs in a virtualized environment eg Docker, QEMU, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMware Fusion/Workstation.
- Minikube Installation Guide: https://minikube.sigs.k8s.io/docs/start/?arch=%2Fwindows%2Fx86-64%2Fstable%2F.exe+download
- For Linux installation, just run this commands:
    >> curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
    >> sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
    >> minikube start

KUBECTL: This is the CLI tool use to interact with the K8 API server.
- The kubectl command could be set with a minikube aliase if not automatically installed by the minikube.
    >> alias kubectl="minikube kubectl --"              # in the ~/.bashrc file.

## To get a local dashboard view of your minicube cluster on your  browser, you can run the  below command that helps generate the url.
    >> minikube dashboard

# BASIC KUBECTL COMMANDS
1. kubectl get nodes:- To see all our nodes and know the status
2. kubectl get pod:- To see all our pods 
3. kubectl get services:- To see our clusters ans services informaation.
4. kubectl create deployment:- To create pods, since deployments are abstractions of pods, which are also abstraction of containers.
    >> kubectl create deployment <deployment name> --image=<image name>
    eg: >> kubectl create deployment nginx-dpm --image=nginx
5. kubectl edit deployment <deployment name>:- this gives us thedeployment configuration file for editing.
6. kubectl get replicaset:- To see informations about the pods in the deployment.
7. kubectl logs <pod name>:- used for debugging and insight into the pods activities.
8. kubectl describe pod <pod name>:- This shows what state changes happen inside the container.
9. kubectl exec -it <pod name> -- bin/bash :- To go into the pod's container,for debugging or running commands.
10. kubectl delete deployment <deployment name> :- to delete pods, deployment and replica sets.
11. kubectl apply -f <file name in yaml> :- To execute a deployment that have multiple setup orconfiguration.
    eg: >> kubectl apply -f nginx-dpm.yaml
12. kubectl delete -f <file name in yaml> :- to delete the deployment in the file setup

## MORE COMMANDS
13. kubectl get pod -o wide:- This is used to view more informatuons about our pods including IP address.
14. kubectl get deployment <deployment name> -o yaml > <filename.yaml>:- to output the status of the deployment in a file format. gotten from etcd.


# KUBERNETES CONFIGURATION YAML FILE
Each configuration file you create in kubernetes irrespective of the kind (deployment, services, ...) has 3 parts
1. metadata
ii. specification
iii. status (usually auto-generated by K8)
    - So desired status matches the actual status, highlihting K8 self healing feauture. The status picks data from the etcd (the K8 brain).
#NB: Sometimes, due to indentation issue of the yaml syntax, we might need online resource like YAML validator to fix the issues.

## HINTS
# Selectors is what helps us match our deployments, pods and services properly, with the right labels.
# Service port should match the ingress port to the service, while the target port should match the destination target pods port of the  or container.











